对称加密：
服务端和客户端都分别有同一个密钥进行加密
加密的方式：
内容 + 加密算法 + 密钥 >> 密文
解密的方式：
密文 + 加密算法 + 密钥 >> 内容

非对称加密：
分为私钥和公钥
私钥为自己所有，公钥告诉第三方
加密的方式：
内容 + 公钥 + 加密算法 >> 密文
解密的方式：
密文 + 私钥 + 加密算法  >> 内容

HTTPS在传输的过程中会涉及到三个密钥：
服务器端的公钥和私钥，用来进行非对称加密
客户端生成的随机密钥，用来进行对称加密
一个HTTPS请求实际上包含了两次HTTP传输，可以细分为8步。
1.客户端向服务器发起HTTPS请求，连接到服务器的443端口
2.服务器端有一个密钥对，即公钥和私钥，是用来进行非对称加密使用的，服务器端保存着私钥，不能将其泄露，公钥可以发送给任何人。
3.服务器将自己的公钥发送给客户端。
4.客户端收到服务器端的公钥之后，会对公钥进行检查，验证其合法性，如果发现发现公钥有问题，那么HTTPS传输就无法继续。严格的说，这里应该是验证服务器发送的数字证书的合法性，关于客户端如何验证数字证书的合法性，下文会进行说明。
如果公钥合格，那么客户端会生成一个随机值，这个随机值就是用于进行对称加密的密钥，我们将该密钥称之为client key，即客户端密钥，这样在概念上和服务器端的密钥容易进行区分。
然后用服务器的公钥对客户端密钥进行非对称加密，这样客户端密钥就变成密文了，至此，HTTPS中的第一次HTTP请求结束。
5.客户端会发起HTTPS中的第二个HTTP请求，将加密之后的客户端密钥发送给服务器。
6.服务器接收到客户端发来的密文之后，会用自己的私钥对其进行非对称解密，解密之后的明文就是客户端密钥，然后用客户端密钥对数据进行对称加密，这样数据就变成了密文。
7.然后服务器将加密后的密文发送给客户端。
8.客户端收到服务器发送来的密文，用客户端密钥对其进行对称解密，得到服务器发送的数据。这样HTTPS中的第二个HTTP请求结束，整个HTTPS传输完成。

第一次请求
1,https请求其实是分两次传输，首先客户端通过访问服务器433端口，然后服务器将公钥证书发送给客户端，客户端收到公钥证书后验证公钥是否有效。如果有效则根据公钥对随机密钥进行加密。第一次请求结束。
第二次请求
2,客户端将加密后随机密钥发送给服务器，然后服务器根据私钥解析出随机密钥，然后用随机密钥对内容进行加密，然后客户端收到加密的内容后，用随机密钥进行解密，就能够得到服务器发送的数据了

restful api规范
1，使用http，或者https协议
2，数据的传输格式使用的是json
3，url链接中不能有动词，只能有名词
4，请求方法get，post，put
5，状态吗 200，400，401，403，404，500 

TCP与UDP的区别
1，TCP是面向连接，UDP发送数据之前不需要建立连接
2，TCP是可靠的，传输的数据无差错，不丢失，不重复，UDP可以不用管客户端是否成功接收数据
3，TCP是点对点的传输，UDP可以一对多，多对多，多对一
4，TCP是全双工可靠信道
5，TCP是面向字节流，UDP是面向报文，网络拥堵不会造成发送速率的降低
6，TCP的首部开销20字节，UDP首部开销8个字节

线程与进程
1，线程是程序执行的最小单元，进程是系统分配资源的最小单位
2，一个进程可以由一个或多个线程组成，线程是一个进程中代码的不同执行线路
3，进程之间互相独立，但是一个进程下的线程之间共享程序的内存空间，以及一些进程级的资源，进程内的线程对其他进程不可见
4，线程的上下文切换比进程上下文切换要快的多

TCP拥塞控制四种算法
1.慢开始
2.拥塞避免
3.快重传
4.快恢复

TCP三次握手
如果有请求在网络中滞留了，直到某个时间才到达server，如果只握手两次，服务端收到这个请求就建立了连接，
但其实这个请求是失效的请求，客户端不会理睬服务端的确认信息，但是server认为新的连接已经建立起来了，
并一直等待client发来数据，这样，server的很多资源就没白白浪费掉了
TCP四次挥手
为了确保数据能够完成传输。
为什么是2MSL
在Client发送出最后的ACK回复，但该ACK可能丢失。
Server如果没有收到ACK，将不断重复发送FIN片段。
所以Client不能立即关闭，它必须确认Server接收到了该ACK。
Client会在发送出ACK之后进入到TIME_WAIT状态。
Client会设置一个计时器，等待2MSL的时间。
如果在该时间内再次收到FIN，那么Client会重发ACK并再次等待2MSL。
所谓的2MSL是两倍的MSL(Maximum Segment Lifetime)。
MSL指一个片段在网络中最大的存活时间，2MSL就是一个发送和一个回复所需的最大时间。
如果直到2MSL，Client都没有再次收到FIN，那么Client推断ACK已经被成功接收，则结束TCP连接。